# -*- coding: utf-8 -*-
"""QR2018_OR-II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ruQX_u5BHdxYOPN1bY-NMABH1PmiL8gN
"""

import numpy as np
import pandas as pd

# Modified Newton's Method and Function

def Functions(m):
    w=M@m+q
    matrix_1=np.diag(m)
    matrix_2=np.diag(w)
    return(np.diag(matrix_1@matrix_2),matrix_1@M+matrix_2)

def Modified_newton_function(M,q,z):
    k=0
    while True:
        #w=M@z+q
        fun2,fun1=Functions(z)
        x=z-0.5*(np.linalg.inv(fun1)@fun2.T)
        Fx,fun_x=Functions(x)
        y=z-np.linalg.inv(fun_x)@fun2.T
        Fy,fun_y=Functions(y)
        z_new=y+(np.linalg.inv(fun1)-2*np.linalg.inv(fun_x))@Fy.T
        z=z_new
        fun2,fun1=Functions(z)
        k+=1
        if np.linalg.norm(fun2)<0.000001:
            print('solution is:\n','z = ',[round(ele,5) for ele in z],'\nw = ',[round(ele,5) for ele in M@z+q],'\n no. of iterations:',k)
            break
        if k>10000:
            print('solution did not converge\n',[round(ele,5) for ele in z],'\n no. of iterations:',k)
            break
    return k

# Task-1

M=np.array([[2,-5,2,0],
            [4,1,0,0],
            [-5,1,2,0],
            [1,-1,-1,2]])
q=np.array([-5,-4,2,1])
z=np.array([2,3.5,4,10]) #initial iteration 

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 2

data_1=pd.read_csv('OREx1.csv')

x=[str(i) for i in range(100,int(data_1.columns[-1]),100)]
M=np.array(data_1[x])
q=np.array(data_1[data_1.columns[-1]])
z=np.array([1 for i in range(len(data_1))])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 3

data_2=pd.read_csv('OREx2.csv')

x=[str(i) for i in range(100,int(data_2.columns[-1]),100)]
M=np.array(data_2[x])
q=np.array(data_2[data_2.columns[-1]])
z=np.array([1 for i in range(len(data_2))])

Modified_newton_function(M,q,z)

# Problem 4

M=np.array([[0,-90,-80,-70,0],
            [-90,-2,-2,-2,2],
            [-70,-2,-1,-3,3],
            [-50,-2,-3,-0.8,3],
            [0,2,3,3,0]])
q=np.array([400,50,30,20,-10])
z=np.array([1,1,1,1,1])

try:
    k=Modified_newton_function(M,q,z)
    
except:
    print('Error')

# Problem 4

M=np.array([[0,0,0,1,2],
            [0,0,-1,-1,2],
            [0,-1,0,-1,1],
            [1,-1,-1,0,0],
            [2,1,0,0,0]])
q=np.array([-2,-1,7,2,-1])
z=np.array([1,1,1,1,1])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 5

M=np.array([[-1,1,1,1],
            [1,0,0,0],
            [1,0,0,-1],
            [1,0,-1,0]])
q=np.array([-1,1,-1,1])
z=np.array([1,1,1,1])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 6

# Problem 7

M=np.array([[-1,2,1],
            [1,-0.5,-0.25],
            [-0.5,-1,-1]])
q=np.array([-0.25,-0.1,3])
z=np.array([1,1,1])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 8

M=np.array([[0,1,1],
            [2,0,1],
            [-4,-5,0]])
q=np.array([-4,-7,10])
z=np.array([1,1,1])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')

# Problem 9

M=np.array([[-2,-2,-2,2],
            [-2,-1,-3,3],
            [-2,-3,-1,3],
            [2,3,3,0]])
q=np.array([1,1,1,1])
z=np.array([1,1,1,1])

try:
    Modified_newton_function(M,q,z)
except:
    print('Error')







